//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// This file is generated once. Modify this file to your needs. 
// If you want the toolchain to re-generate this file, please 
// delete it before running the code generator.
//--------------------------------------------------------------------------
#include "DemonstrationTask.hh"
#include "ComponentOpenRave.hh"

#include <iostream>

DemonstrationTask::DemonstrationTask(SmartACE::SmartComponent *comp) 
:	DemonstrationTaskCore(comp)
{
	std::cout << "constructor DemonstrationTask\n";
}
DemonstrationTask::~DemonstrationTask() 
{
	std::cout << "destructor DemonstrationTask\n";
}


void DemonstrationTask::on_GripperStateServiceIn(const CommManipulatorObjects::CommGripperState &input)
{
	// upcall triggered from InputPort GripperStateServiceIn
	// - use a local mutex here, because this upcal is called asynchroneously from outside of this task
	// - do not use longer blocking calls here since this upcall blocks the InputPort GripperStateServiceIn
	// - if you need to implement a long-running procedure, do so within the on_execute() method and in
	//   there, use the method gripperStateServiceInGetUpdate(input) to get a copy of the input object
}
void DemonstrationTask::on_MobileManipulatorStateServiceIn(const CommManipulatorObjects::CommMobileManipulatorState &input)
{
	// upcall triggered from InputPort MobileManipulatorStateServiceIn
	// - use a local mutex here, because this upcal is called asynchroneously from outside of this task
	// - do not use longer blocking calls here since this upcall blocks the InputPort MobileManipulatorStateServiceIn
	// - if you need to implement a long-running procedure, do so within the on_execute() method and in
	//   there, use the method mobileManipulatorStateServiceInGetUpdate(input) to get a copy of the input object
}

int DemonstrationTask::on_entry()
{
	// do initialization procedures here, which are called once, each time the task is started
	// it is possible to return != 0 (e.g. when initialization fails) then the task is not executed further
	return 0;
}
int DemonstrationTask::on_execute()
{
	// this method is called from an outside loop,
	// hence, NEVER use an infinite loop (like "while(1)") here inside!!!
	// also do not use blocking calls which do not result from smartsoft kernel
	
	// to get the incoming data, use this methods:
	Smart::StatusCode status;
	CommManipulatorObjects::CommGripperState gripperStateServiceInObject;
	status = this->gripperStateServiceInGetUpdate(gripperStateServiceInObject);
	if(status != Smart::SMART_OK) {
		std::cerr << status << std::endl;
		// return 0;
	} else {
		std::cout << "received: " << gripperStateServiceInObject << std::endl;
	}
	CommManipulatorObjects::CommMobileManipulatorState mobileManipulatorStateServiceInObject;
	status = this->mobileManipulatorStateServiceInGetUpdate(mobileManipulatorStateServiceInObject);
	if(status != Smart::SMART_OK) {
		std::cerr << status << std::endl;
		// return 0;
	} else {
		std::cout << "received: " << mobileManipulatorStateServiceInObject << std::endl;
	}

	std::cout << "Hello from DemonstrationTask " << std::endl;

	// it is possible to return != 0 (e.g. when the task detects errors), then the outer loop breaks and the task stops
	return 0;
}
int DemonstrationTask::on_exit()
{
	// use this method to clean-up resources which are initialized in on_entry() and needs to be freed before the on_execute() can be called again
	return 0;
}
